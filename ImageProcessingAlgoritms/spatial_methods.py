import cv2
import numpy as np


"""
Розглянемо просторові фільтри
    MedianBlure - в медіанному фільтрі ми вибираємо ковзаюче вікно, яке буде
    переміщатись по всім пікселям зображення. В цьому випадку ми беремо всі
    значення пікселів, котрі попадають в фільтр деякої розмірності, після чого
    приймаємо медіану цих значень. Результат роботи буде призначений центральному
    пікселю.

    Наприклад фільтр розміром 3 на 3 буде з наступними значеннями після розміщення
    його на зображенні. Щоб розрахувати медіану, яка являється середнім значенням
    відсортованої послідовності чисел, ми відсортуємо всі елементи матриці та 
    знайдемо середнє число

                            43  65  29
                            17  57  98
                            63  84  59
    
    Сортування дасть нам наступні значення: 17, 29, 43, 57, 59, 63, 65, 84, 98

    Щоб знайте середнє, порахуємо кількість всіх чисел, додамо до цього значення 1
    і розділемо на 2. В нашому випадку наш алгоритм видасть нам значення 59. Це
    і буде новим значенням пікселя 
"""
def median_blure_exmpl(image):
    processed_image = cv2.medianBlur(image, 7)
    cv2.imshow("Median Filter", processed_image)

"""
    Filter2D and mean filter - так званний середній фільтр заміняє поточне значення
    пікселя на середнє значення оточуюючих. Таким чином, при середній фільтрації кожний
    піксель зображення буде замінений середнім значенням его сусідів та самого пікселя.
    Це призводить до видалення рябі, сглажування шуму, кольровому сглужаванню всього 
    зображення. 
    
    Розглянемо приклад - в нас є набір пікселів, з наступною матрицею, і ми будемо
    застосовувати до нього фільтр середніх значень
                            7   9   23
                            76  91  7
                            64  90  32
    Тепер новим значенням буде 44 заміть 91 оскільки 
    (7 + 9 + 23 + 76 + 91 + 7 + 64 + 90 + 32) / 9 = 44
"""
def mean_2d_filter_exmpl(image):
    kernel = np.ones((5, 5), np.float32) / 25
    processed_image = cv2.filter2D(image, -1, kernel)
    cv2.imshow("2D Mean Filter", processed_image)

"""
    Erode - при ерозії ядро також має основну роль при звертуванні зображення.
    Якщо ми розглянемо пікселі в двійковому представленні, то кожен розглядуваний
    піксель буде дорівнювати 1, якщо в ядрі будуть тільки 1. Інакше піксель буде
    дорівнювати 0. В залежності від розміру ядра, всі пікселі біля меж відкидаються,
    тому товщина і розмір об'єкту переднього плану може змінюватись (зазвичай зменьшується)

    Ерозія дуже корисна для видалення мілкої рябі, мілких пов'язаних об'єктів і т.д.
"""
def erode_filter_exmpl(image):
    kernel = np.ones((5,5), np.uint8)
    processed_image = cv2.erode(image, kernel, iterations=1)
    cv2.imshow("Erode", processed_image)


if __name__ == "__main__":
    image1 = cv2.imread("static/noise.jpeg")
    image2 = image1.copy()
    image3 = image1.copy()
    cv2.imshow("Original image", image1)
    median_blure_exmpl(image1)
    mean_2d_filter_exmpl(image2)
    erode_filter_exmpl(image3)
    cv2.waitKey(0)
